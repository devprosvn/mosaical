The root cause here is that `getAccruedInterest(...)` only returns the **interest portion**, not the principal + interest. Your tests were using that value as if it were the full debt, so they paid only \~0.02 ETH + 1 ETH instead of 5 ETH + \~0.02 ETH.

The cleanest fix is to **re-compute “total owed” in your tests** as:

```js
totalOwed = principal + interest;
```

and then add a buffer.

---

### 1) “Should handle loan repayment correctly” test

Change this block:

```js
// Get total owed using view function
const totalOwed = await loanManager.getAccruedInterest(borrower.address, collectionAddress, 1);

// Add generous buffer to ensure we cover all accrued interest regardless of timing
const amountToPay = totalOwed.add(ethers.parseEther("1"));

// Repay loan
await loanManager.connect(borrower).repay(
  collectionAddress,
  1,
  { value: amountToPay }
);
```

to:

```js
// Get just the interest owed
const interestOwed = await loanManager.getAccruedInterest(
  borrower.address,
  collectionAddress,
  1
);

// principal was the borrowAmount above
const principal = borrowAmount;

// Build total = principal + interest + buffer
const amountToPay = principal
  .add(interestOwed)
  .add(ethers.parseEther("1"));

// Repay loan
await loanManager.connect(borrower).repay(
  collectionAddress,
  1,
  { value: amountToPay }
);
```

---

### 2) “Should complete full lending cycle” integration test

Same mistake in step 9. Replace:

```js
// 9. Repay loan
const totalOwed = await loanManager.getAccruedInterest(borrower.address, collectionAddress, 1);

// Add generous buffer to ensure we cover all accrued interest regardless of timing
const amountToPay = totalOwed.add(ethers.parseEther("1"));

await loanManager.connect(borrower).repay(
  collectionAddress,
  1,
  { value: amountToPay }
);
```

with:

```js
// 9. Repay loan
const interestOwed = await loanManager.getAccruedInterest(
  borrower.address,
  collectionAddress,
  1
);

// Re-use the same borrowAmount from step 3
const amountToPay = borrowAmount
  .add(interestOwed)
  .add(ethers.parseEther("1"));

await loanManager.connect(borrower).repay(
  collectionAddress,
  1,
  { value: amountToPay }
);
```

---

With those two small patches, you’ll actually cover the **principal + interest** (plus buffer) and your `require(msg.value >= totalOwed)` will pass. No changes to the Solidity contracts are needed.
