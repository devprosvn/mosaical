You're very close! All 6 of your failing tests are caused by the same single issue.

The problem is that your `LoanManagerV3` contract tries to call a function named `mintOnLoan` on your `DPOTokenV3` contract, but that function doesn't actually exist in the `DPOTokenV3.sol` file you've provided. You've correctly updated the test file to authorize the loan manager, but you still need to add the corresponding function to the token contract itself.

---

### Why This Happens

1.  In every failing test, the code calls `loanManager.connect(...).borrow(...)`.
2.  Inside the `LoanManagerV3` contract, the `borrow` function makes a call to the DPO token contract like this: `dpoToken.mintOnLoan(...)`.
3.  The `DPOTokenV3.sol` contract doesn't have a function with this name, so the call fails with the `function selector was not recognized` error.

---

### ðŸ”§ The Solution

You need to add the missing `mintOnLoan` function to your `DPOTokenV3.sol` contract. This function will handle the specific logic for minting tokens tied to an NFT-backed loan, updating the special ledgers you've already defined.

**Update the `DPOTokenV3.sol` file with the following function:**

```solidity
// contracts/DPOTokenV3.sol

// ... (imports and contract definition)

contract DPOTokenV3 is ERC20, Ownable {

    // ... (your existing state variables and events) ...

    constructor() ERC20("Diversified Portfolio Option", "DPO") Ownable(msg.sender) {
        _mint(msg.sender, 1000000 * 10**18); // Initial supply
    }

    // âœ¨ ADD THIS ENTIRE FUNCTION âœ¨
    function mintOnLoan(
        address collection,
        uint256 tokenId,
        address borrower,
        uint256 amount
    ) external {
        require(authorizedMinters[msg.sender], "Not authorized to mint");

        // Mint the generic ERC20 tokens to the borrower
        _mint(borrower, amount);

        // Update your NFT-specific ledgers
        tokenHoldings[collection][tokenId][borrower] += amount;
        nftTokenSupply[collection][tokenId] += amount;

        emit TokensMinted(borrower, amount);
    }
    
    // Your other functions (mint, authorizeMinter, burn) remain unchanged.
    function mint(address to, uint256 amount) external {
        require(authorizedMinters[msg.sender] || msg.sender == owner(), "Not authorized to mint");
        _mint(to, amount);
        emit TokensMinted(to, amount);
    }

    function authorizeMinter(address minter) external onlyOwner {
        authorizedMinters[minter] = true;
        emit MinterAuthorized(minter);
    }

    function burn(uint256 amount) external {
        _burn(msg.sender, amount);
    }
}
```

By adding this single function to `DPOTokenV3.sol`, your `LoanManagerV3` will now be able to successfully call it, which will resolve all 6 of your failing tests. The authorization you've already added to `MosaicalMVP.test.js` is correct and is a necessary part of this fix.