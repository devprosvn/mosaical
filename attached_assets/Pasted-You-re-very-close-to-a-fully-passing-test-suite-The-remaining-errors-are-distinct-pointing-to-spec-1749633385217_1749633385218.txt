You're very close to a fully passing test suite! The remaining errors are distinct, pointing to specific logical mismatches between your tests and your contracts.

Here’s a breakdown and the complete solution for each of the 4 failing tests.

---

### 1. Loan Manager: "Should handle loan repayment correctly"

* **Error:** `reverted with reason string 'Must repay full amount'`
* **Cause:** This happens because your test calls `updateLoanInterest` and then calls `repay`, which *also* calls `updateLoanInterest`. This double-counts the interest, causing the amount you send to be slightly less than what the contract calculates internally.
* **✅ Solution:** The contract's `repay` function should be the single source of truth for the calculation. Remove the extra `updateLoanInterest` call from your test.

    #### **File: `test/MosaicalMVP.test.js`**
    ```javascript
    it("Should handle loan repayment correctly", async function () {
        // ... setup code ...
        await loanManager.connect(borrower).borrow(/* ... */);
    
        // Advance time for interest accrual
        await time.increase(time.duration.days(30));
    
        // ❌ FIX: REMOVE this redundant call. The repay function handles it.
        // await loanManager.updateLoanInterest(borrower.address, collectionAddress, 1);
    
        // Get total owed by calling the view function
        const totalOwed = await loanManager.getAccruedInterest(borrower.address, collectionAddress, 1);
    
        // Repay loan
        await loanManager.connect(borrower).repay(
            collectionAddress,
            1,
            totalOwed,
            { value: totalOwed }
        );
    
        // Verify loan closed
        const loanAfterRepay = await loanManager.loanData(borrower.address, collectionAddress, 1);
        expect(loanAfterRepay.isActive).to.be.false;
    });
    ```

---

### 2. & 4. DPO Token / Integration: "Should handle DPO token trading" & "Should complete full lending cycle"

* **Error:** `reverted with reason string 'Insufficient payment'`
* **Cause:** The `require` statement inside the `placeBuyOrder` function (`require(msg.value >= amount * price, ...)`) is mathematically incorrect when both `amount` and `price` have 18 decimals. The product results in a number with 36 decimals, which will always be larger than the `msg.value` (which has 18 decimals).
* **✅ Solution:** Fix the calculation inside the contract by normalizing the result to 18 decimals, just like you did in the test.

    #### **File: `contracts/DPOTokenV3.sol`**
    ```solidity
    function placeBuyOrder(address collection, uint256 tokenId, uint256 amount, uint256 price) external payable {
        // ✅ FIX: Normalize the multiplication result to 18 decimals.
        require(msg.value >= (amount * price) / 10**18, "Insufficient payment");
        
        // ... rest of the function ...
    }
    ```
    This single change in the contract will fix both failing tests (#2 and #4).

---

### 3. DPO Token System: "Should distribute and claim interest"

* **Error:** `Error: no matching fragment (operation="fragment", ...)`
* **Cause:** This is an `ethers.js` error indicating that the arguments you're using to call `distributeInterest` in your test don't match the function's signature in the contract. Your test is sending 3 arguments, but after the last fix, the contract now expects 4 (`collection`, `tokenId`, `holder`, `amount`).
* **✅ Solution:** Update the test to call the function with the correct arguments, specifying the `borrower` as the `holder` who should receive the interest.

    #### **File: `test/MosaicalMVP.test.js`**
    ```javascript
    it("Should distribute and claim interest", async function () {
        // ... setup code ...
        await loanManager.connect(borrower).borrow(/* ... */);
    
        // Distribute interest
        const interestAmount = ethers.parseEther("0.1");
    
        // ✅ FIX: Add the 'borrower.address' as the 4th argument.
        await dpoToken.distributeInterest(
            collectionAddress,
            1,
            borrower.address, // The holder receiving the interest
            interestAmount
        );
    
        // Check pending interest
        // ✅ FIX: We must now also pass the holder's address here.
        const pending = await dpoToken.calculatePendingInterest(
            borrower.address,
            collectionAddress,
            1
        );
    
        // ✅ FIX: The pending amount should now equal the interestAmount
        expect(pending).to.equal(interestAmount);
    
        // Claim interest
        await dpoToken.connect(borrower).claimInterest(collectionAddress, 1);
    
        const pendingAfter = await dpoToken.calculatePendingInterest(
            borrower.address,
            collectionAddress,
            1
        );
        expect(pendingAfter).to.equal(0);
    });
    ```
    You must also apply this same fix to the `distributeInterest` call inside the `"Should complete full lending cycle"` test.